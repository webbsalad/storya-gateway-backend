// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/content/content_service.proto

package content

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _content_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetItemRequestMultiError,
// or nil if none found.
func (m *GetItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetItemId()); err != nil {
		err = GetItemRequestValidationError{
			field:  "ItemId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContentType

	if len(errors) > 0 {
		return GetItemRequestMultiError(errors)
	}

	return nil
}

func (m *GetItemRequest) _validateUuid(uuid string) error {
	if matched := _content_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetItemRequestMultiError is an error wrapping multiple validation errors
// returned by GetItemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemRequestMultiError) AllErrors() []error { return m }

// GetItemRequestValidationError is the validation error returned by
// GetItemRequest.Validate if the designated constraints aren't met.
type GetItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemRequestValidationError) ErrorName() string { return "GetItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemRequestValidationError{}

// Validate checks the field values on GetListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListRequestMultiError,
// or nil if none found.
func (m *GetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItemIds() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = GetListRequestValidationError{
				field:  fmt.Sprintf("ItemIds[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for ContentType

	if len(errors) > 0 {
		return GetListRequestMultiError(errors)
	}

	return nil
}

func (m *GetListRequest) _validateUuid(uuid string) error {
	if matched := _content_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetListRequestMultiError is an error wrapping multiple validation errors
// returned by GetListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListRequestMultiError) AllErrors() []error { return m }

// GetListRequestValidationError is the validation error returned by
// GetListRequest.Validate if the designated constraints aren't met.
type GetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListRequestValidationError) ErrorName() string { return "GetListRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListRequestValidationError{}

// Validate checks the field values on GetListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListResponseMultiError, or nil if none found.
func (m *GetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListResponseMultiError(errors)
	}

	return nil
}

// GetListResponseMultiError is an error wrapping multiple validation errors
// returned by GetListResponse.ValidateAll() if the designated constraints
// aren't met.
type GetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListResponseMultiError) AllErrors() []error { return m }

// GetListResponseValidationError is the validation error returned by
// GetListResponse.Validate if the designated constraints aren't met.
type GetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListResponseValidationError) ErrorName() string { return "GetListResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListResponseValidationError{}

// Validate checks the field values on GetRandRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRandRequestMultiError,
// or nil if none found.
func (m *GetRandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContentType

	// no validation rules for Count

	if len(errors) > 0 {
		return GetRandRequestMultiError(errors)
	}

	return nil
}

// GetRandRequestMultiError is an error wrapping multiple validation errors
// returned by GetRandRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRandRequestMultiError) AllErrors() []error { return m }

// GetRandRequestValidationError is the validation error returned by
// GetRandRequest.Validate if the designated constraints aren't met.
type GetRandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRandRequestValidationError) ErrorName() string { return "GetRandRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRandRequestValidationError{}

// Validate checks the field values on GetRandResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRandResponseMultiError, or nil if none found.
func (m *GetRandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRandResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRandResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRandResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRandResponseMultiError(errors)
	}

	return nil
}

// GetRandResponseMultiError is an error wrapping multiple validation errors
// returned by GetRandResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRandResponseMultiError) AllErrors() []error { return m }

// GetRandResponseValidationError is the validation error returned by
// GetRandResponse.Validate if the designated constraints aren't met.
type GetRandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRandResponseValidationError) ErrorName() string { return "GetRandResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRandResponseValidationError{}

// Validate checks the field values on CreateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemRequestMultiError, or nil if none found.
func (m *CreateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Year

	// no validation rules for Type

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateItemRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateItemRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateItemRequestValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateItemRequestMultiError(errors)
	}

	return nil
}

// CreateItemRequestMultiError is an error wrapping multiple validation errors
// returned by CreateItemRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemRequestMultiError) AllErrors() []error { return m }

// CreateItemRequestValidationError is the validation error returned by
// CreateItemRequest.Validate if the designated constraints aren't met.
type CreateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemRequestValidationError) ErrorName() string {
	return "CreateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemRequestValidationError{}

// Validate checks the field values on UpdateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemRequestMultiError, or nil if none found.
func (m *UpdateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetItemId()); err != nil {
		err = UpdateItemRequestValidationError{
			field:  "ItemId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Year

	// no validation rules for Type

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateItemRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateItemRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateItemRequestValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateItemRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateItemRequest) _validateUuid(uuid string) error {
	if matched := _content_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateItemRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateItemRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemRequestMultiError) AllErrors() []error { return m }

// UpdateItemRequestValidationError is the validation error returned by
// UpdateItemRequest.Validate if the designated constraints aren't met.
type UpdateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemRequestValidationError) ErrorName() string {
	return "UpdateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemRequestValidationError{}

// Validate checks the field values on DeleteItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemRequestMultiError, or nil if none found.
func (m *DeleteItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetItemId()); err != nil {
		err = DeleteItemRequestValidationError{
			field:  "ItemId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return DeleteItemRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteItemRequest) _validateUuid(uuid string) error {
	if matched := _content_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteItemRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteItemRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemRequestMultiError) AllErrors() []error { return m }

// DeleteItemRequestValidationError is the validation error returned by
// DeleteItemRequest.Validate if the designated constraints aren't met.
type DeleteItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemRequestValidationError) ErrorName() string {
	return "DeleteItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemRequestValidationError{}
